from typing import List

class Solution:
    def putMarbles(self, weights: List[int], k: int) -> int:
        # If k = 1, put all marbles in 1 bag. In that case, maxScore = minScore, hence diff = 0.
        # Otherwise, 1st and last element will always be counted towards the score. If cut point
        # is between index i-1 and i then weights[i-1]+weights[i] will be added to both scores - min
        # and max. So just iterate through the weights array and calculate the cut sums for each
        # index. Then sum up the (k-1) largest cuts and (k-1) smallest cuts and return their diff.
        #
        # weights = [1,3,5,7,2] ; k = 2
        # distributions:
        #     [1]       [3,5,7,2]  => score =  7  (min)
        #     [1,3]     [5,7,2]    => score = 11
        #     [1,3,5]   [7,2]      => score = 15  (max)
        #     [1,3,5,7] [2]        => score = 12
        # diff = 15 - 7 = 8
        # 
        #             [1,  3,  5,  7,  2]
        #                |   |   |   |
        # cuts =         4   8   12  9
        # 
        # sorted_cuts = [4,8,9,12]
        # sum(1-largest) - sum(1-smallest) = 12 - 4 = 8
        #
        if k == 1:
            return 0
        cuts = list()
        for i in range(1, len(weights)):
            cuts.append(weights[i-1] + weights[i])
        cuts.sort()
        return sum(cuts[(-k+1):]) - sum(cuts[:(k-1)])

# Main section
for weights, k in [
                     ([1,3,5,1], 2),
                     ([1,3], 2),
                     ([1,3,5,7,2], 2),
                     ([1,3,5,7,2], 3),
                     ([1,3,5,7,2], 1),
                     ([91,28,28,75,74,59,41,84,22,22,79,61,33,23,38,92,48,47,68,49,90,34,84,5,4,67,12,29,3,72,60,60,30,35,83,81,95,52,90,94,94,66,87,34,31,89,86,28,66,99,15,34,43,9,42,56,87,14,100,69,53,89,5,78,59,73,67,15,4,16,88,82,72,39,75,14,26,24,95,80,72,90,33,11,69,67,70,13,70,94,4,82,50,53,79,28,25,92,79,42,16,79,22,59,20,44,33,6,17,37,22,69,81,33,28,32,6,47,47,93,98,30,92,23,6,97,10,57,72,66,85,22,22,6,7,12,65,27,78,74,48,21,71,42,56,79,57,6,36,52,91,32,16,42,23,93,14,25,96,69,87,64,8,74,74,12,78,41,85,100,77,65,10,36,92,67,50,4,73,25,20,82,38,3,36,7,14,1,86,78,35,92,86,79,80,34,9,47,76,12,12,76,55,91,42,68,34,58,85,10,92,15,2,76,85,21,92,51,36,14,52,4,82,30,4,19,32,79,8,86,86,68,37,79,43,38,31,17,79,61,71,18,35,18,63,9,26,23,42,95,87,83,4,81,24,90,37,64,20,60,60,43,87,6,24,47,21,42,3,52,27,8,74,5,96,98,55,13,4,59,59,75,58,61,78,72,38,68,17,70,52,2,4,27,90,26,19,15,25,27,40,79,81,92,3,56,96,20,59,73,76,81,98,46,39,20,97,7,66,20,71,19,67,91,64,10,41,70,99,90,80,99,85,22,68,22,77,69,61,99,29,65,18,41,2,15,55,43,82,14,48,34,38,95,84,70,9,60,77,52,70,2,61,42,2,44,64,7,34,16,8,22,92,7,54,28,55,55,35,9,24,32,27,99,4,94,10,15,13,40,16,20,74,69,67,41,3,100,23,17,35,7,71,30,29,2,51,36,44,67,57,72,25,100,37,39,48,82,68,18,74,74,88,39,87,84,41,52,98,44,55,51,61,50,99,20,48,67,88,27,95,1,12,42,8,86,99,78,75,35,55,57,93,44,19,50,70,30,67,4,84,44,29,21,68,70,41,13,91,36,64,9,94,89,55,69,56,2,39,85,93,23,90,85,46,100,96,75,89,70,6,64,16,15,93,24,66,88,63,97,81,4,94,35,26,7,50,98,19,30,33,72,57,25,79,81,61,15,75,15,20,31,5,9,58,87,59,59,79,36,48,46,13,43,7,40,80,7,10,62,38,52,3,73,41,26,83,92,11,23,15,92,63,50,70,83,24,15,34,34,79,80,81,91,43,79,99,43,3,28,98,47,89,91,13,25,90,54,21,27,79,60,16,32,13,94,47,10,58,49,99,17,92,97,20,23,61,4,41,37,9,29,37,8,20,40,56,55,43,25,32,28,80,85,23,76,20,29,7,59,26,94,40,89,33,12,15,50,32,56,39,57,25,22,10,55,49,14,39,61,19,16,83,43,93,48,12,49,74,85,11,50,47,5,35,96,54,68,66,29,45,36,31,31,6,19,53,75,95,72,71,73,41,48,20,2,94,99,71,68,10,98,78,75,97,21,45,60,27,53,13,48,17,16,91,40,17,7,24,35,36,84,79,82,98,27,45,14,52,98,20,58,11,49,50,55,16,49,45,6,15,7,16,57,54,82,63,50,86,60,100,47,20,34,6,10,45,17,50,8,49,12,82,3,90,66,78,84,56,28,73,65,63,90,88,48,33,99,6,80,40,80,23,84,61,100,92,78,91,77,20,95,30,52,62,15,88,61,31,40,58,79,26,81,77,45,38,50,31,71,31,27,15,14,41,47,91,81,50,73,1,61,85,74,9,55,39,32,32,8,15,21,24,44,16,64,6,15,35,38,48,97,58,68,92,7,12,95,32,73,87,9,1,95,48,76,81,15,81,60,19,57,1,20,50,57,50,99,21,87,7,20,90,56,3,90,7,90,58,56,83,12,48,50,41,90,8,98,10,23,9,98,25,61,81,65,54,54,80,50,100,67,48,24,61,20,25,60,7,87,17,14,27,68,19,16,92,98,27,17,66,78,93,70,65,20,25,75,83,69,67,75,82,2,3,92,87,90,94,23,31,61,9,28,48,100,69,38,28,17,33,69,79,23,92,86,68,30,8,98,29,86,45,39,94,91,12,60,30,54,93,22,8,30,98,8,64,12,24,29,10,21,25,25,38,21,50,97,19,35,54,45,1,82,41,85,50,72,85,95,73,91,30,60,77,33,96,74,23,9,13,8,76,35,91,95,39,94,60,92], 19),
                  ]:
    print(f'weights, k = {weights}, {k}')
    sol = Solution()
    r = sol.putMarbles(weights, k)
    print(f'r = {r}')
    print('===============')

