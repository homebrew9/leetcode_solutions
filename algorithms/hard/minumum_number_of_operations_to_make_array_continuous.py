#
# Doesn't work for last test case. Correct answer is 2, but this algo returns 4.
#
from typing import List

class Solution:
    def minOperations(self, nums: List[int]) -> int:
        N = len(nums)
        min_val, max_val = float('inf'), float('-inf')
        for n in nums:
            min_val = min(min_val, n)
            max_val = max(max_val, n)
        # Once min and max values are determined, compare both two arrays with sorted_nums:
        # [min_val, min_val+N-1] with sorted_nums, and
        # [max_val-N+1, max_val] with sorted_nums
        # and determine which comparison leaves less "missing elements". That's the answer.
        nums.sort()
        res = float('inf')
        cnt = 0
        arr = [None for _ in range(N)]
        left, right = min_val, min_val+N-1
        for n in nums:
            if left <= n <= right:
                arr[n-left] = 1
        cnt = sum([i is None for i in arr])
        print(f'\tcnt = {cnt}')
        res = min(res, cnt)
        cnt = 0
        arr = [None for _ in range(N)]
        left, right = max_val-N+1, max_val
        for n in nums:
            if left <= n <= right:
                arr[n-left] = 1
        cnt = sum([i is None for i in arr])
        print(f'\tcnt = {cnt}')
        res = min(res, cnt)
        return res


# Main section
for nums in [
               #[57,11,29,13,14],
               #[4,2,5,3],
               #[1,2,3,5,6],
               #[1,10,100,1000],
               #[42,15,10,99,59,85,54,84,36,98,60,52,18,29,81,34,52,72,28,72,85,84,30,44,54,17,87,73,4,11,62,1,45,30,49,43,94,2,57,53,79,46,81,11,42,84,38,85,2,90,50,89,100,78,45,30,35,6,52,1,8,3,98,57,85,32,84,34,62,46,3,59,41,34,38,42,25,57,91,68,47,24,98,14,53,86,98,81,90,13,26,38,63,30,84,60,80,60,98,65],
               #[43,33,53,60,2,97,65,57,34,51,39,60,6,71,9,93,86,99,22,63,81,44,61,18,56,56,60,72,52,46,71,71,57,69,72,100,68,39,53,64,48,14,51,1,70,8,78,98,6,87],
               #[8441,3997,3541,6846,4078,1223,9750,1207,7106,7249,6570,5656,7645,2991,740,5966,8447,4295,40,560,8971,9270,1582,8785,5855,6588,2665,446,5472,9786,2778,6537,4708,6795,5263,2023,5265,3313,9995,4516,9240,5193,4436,4302,9741,5300,4193,8915,5623,7968,1600,15,754,5600,8249,6357,8785,3330,4642,4043,1825,5756,2513,4033,9880,5018,9443,5970,9780,1240,646,5402,5526,8114,3311,507,7528,9173,2332,843,5930,3143,3651,8161,4598,2920,7089,7104,4641,5724,661,3811,6357,2730,2699,2008,4362,25,4349,5223]
               #[8441,3997,3541,6846,4078,1223,9750,1207,7106,7249,6570,5656,7645,2991,740,5966],       # Correct; 15
               #[8441,3997,3541,6846,4078,1223,9750,1207,7106,7249,6570,5656,7645,2991,740,5966,8447],  # Incorrect: 16 (correct=15)
               #[4605,9389,8482,3718,5305,2584,8873,3088,6677,7444,6045,1460,4758,1741,640,6918,449,9037,6065,2061,2281,7901,5089,1067,6266,342,1831,9185,3496,4943,5185,7896,4857,8026,3859,2935,8223,7920,8869,1088,8243,9653,1068,3044,3795,3699,8041,5697,5336,9537,9973,8663,2714,6772,8972,2069,2232,1410,5691,9146,9167,8161,3292,9508,8115,756,1163,7091,5091,863,7274,703,3600,744,2495,6197,9421,6057,818,733,3170,7935,304,1965,9087,3516,7656,7788,5768,2806,6939,5639,9406,6733,1717,3872,359,8397,6328,8399,2509,9152,2701,780,2877,5862,4844,9588,9383,7399,4209,6247,1749,5681,5154,5754,3229,4802,2284,609,332,1765,2731,8858,3806,8925,2511,9812,5356,9058,3824,7133,4783,8575,5225,1268,6572,1522,3785,6915,9368,2033,2352,3401,1942,5999,2938,712,7448,5553,7869,5319,7726,7438,4060,1845,8914,2836,5357,5115,4767,1677,3546,4831,1095,5215,6391,1248,2908,6129,1706,9661,8061,2367,9661,7459,7958,4568,6907,6653,5397,2818,5454,8242,1180,4012,8511,5311,1470,275,8565,2431,2518,82,2049,7708,3251,8178,6004,8240,3757,5449,6018,4611,2034,7083,5368,1850,9091,5137,2115,4780,7931,5232,3481,2746,7566,8671,3678,851,6252,3412,6178,7342,8320,4169,5840,6630,4431,547,1526,5973,1409,9629,7536,904,1262,3660,7250,4877,854,692,4571,6608,693,6895,2544,6683,9327,2707,9591,5471,9369,3611,305,9756,342,4823,9690,5598,4403,9418,4738,334,9525,4327,6075,399,8003,5292,8778,7165,5108,6941,9452,3621,249,3347,9647,7716,8458,7182,5202,8578,5081,9009,1232,8122,6988,7724,2576,6536,2042,4373,4725,7224,8663,3802,5993,6325,7464,7633,790,9985,9995,4240,6749,6198,5060,3683,6108,6643,8176,1341,7320,1699,8106,6607,7168,4119,9435,3866,5468,938,8128,7248,3997,1899,3072,4935,5720,8703,4435,4808,4136,7804,4779,7319,1933,5907,8657,1212,4752,6592,3786,454,2835,3280,9408,3021,5785,5249,1212,6040,1865,1697,1537,7400,2764,9809,4515,2775,8077,1873,2860,1247,781,1105,9897,4602,5873,6821,803,891,2474,1152,5268,9580,9342,7788,8622,1796,8124,1487,4508,4125,5714,7489,3536,1819,3617,1676,6019,8128,6995,4783,6856,6559,6675,4760,4344,7892,6388,5427,6311,8282,8601,2766,371,2909,1103,5902,1389,3241,322,8584,7860,7695,5834,5160,4117,1291,4920,8166,1324,8235,8803,2901,7807,6563,888,3411,8342,885,7822,2319,3588,7315,6106,2887,1425,3013,8273,8010,2937,2538,4076,6762,4106,7440,2400,1837,6735,9149,906,1728,582,9135,7071,8245,5878,8096,3517,6104,3821,1981,9887,7248,5050,4613,8712,4541,1765,5936,1029,8723,1906,7061,6959,2018,7946,6292,5724,485,7930,802,9479,689,5885,5242,3989,2238,3296,6993,4523,3752,2993,7486,2711,5730,2610,5976,2539,8639,2882,2741,6353,1619,2972,7949,856,5600,898,4605,1069,2863,7227,1107,8995,2498,4713,3899,4226,2094,7740,1477,594,6669,8887,1736,9310,8788,4121,4019,5151,154,6515,3451,3835,1424,7339,7847,6239,6724,8116,4269,665,1404,9514,7203,3978,7467,6552,8138,8639,6489,8872,9679,9267,2656,2877,5556,7426,5173,1358,4203,7879,1701,8073,1101,8884,4293,4302,2048,9970,6503,1666,9224,9778,1977,2218,4406,3019,5220,3637,4672,4494,2743,8387,2038,1630,4878,830,3785,4593,1930,5827,793,502,3931,3742,5392,4148,4101,9196,595,9598,6895,423,7158,6372,1157,6878,2968,8594,4464,1926,523,2986,2077,6696,6403,8605,9534,2619,7909,7017,9985,1759,9997,7761,201,8411,4515,5216,8822,3423,8235,2202,9998,4785,8664,3171,7662,4981,5398,3590,431,5350,5888,6761,2986,4036,1340,2780,6775,6927,3853,4023,2373,8387,7634,1524,337,9807,3860,9643,8150,1144,4434,1392,9949,1518,410,7924,8098,5017,3177,3735,6126,7684,1018,6331,7644,2239,9882,5539,7707,7174,8877,6853,7634,9797,8654,3329,3212,9072,8777,9773,9009,8106,5593,4645,3007,8697,9404,9077,4336,1973,7912,3626,6548,4546,3113,546,9283,2180,2300,8650,2992,8019,4279,26,868,740,6680,1231,7737,5483,803,5793,4639,6467,6377,9448,8033,7292,2571,2452,4933,1029,9080,2086,1126,4804,4416,5310,7493,3668,7696,5558,7005,7552,2932,9966,2351,2818,3277,7171,3212,7432,8210,4908,9842,8182,8923,1781,6135,8581,9905,4467,121,4525,2285,4332,8319,9802,4156,6344,4676,6796,3165,6598,5908,2564,6170,1717,3610,2931,2111,6975,3814,974,8767,3901,6836,7106,5555,1877,1520,7114,6975,2540,1202,1546,4873,1007,7715,3107,5579,4911,2360,795,8317,5795,4814,2294,4415,7202,450,1451,8241,5946,951,1276,7955,2930,752,1187,3164,686,7899,2985,9497,4100,2191,5127,9685,2878,3256,8006,1925,268,9530,1598,274,4088,7834,4943,4019,2092,1784,5704,1939,1125,7095,5681,6570,459,9142,8046,2753,6662,1176,1998,5322,8430,9723,6218,9233,8468,4332,2965,9467,2100,9069,1720,5813,6584,4639,9250,6232,9767,3850,2782,9543,9817,8565,8021,7753,2703,1908,4877,8337,1330,536,7862,9444,8147,6275,4477,3507,5638,4129,1269,6889,5243,3832,8841,5633,6718,8458,5698,4369,4244,9161,4303,1804,615,9952,9931,9401,6250,8766,5496,5160,4650,7819,4344,6954,4285,3821,8348,9073,8316,8874,8689,3687,6655,1951,4808,7506,9561,9944,668,4194,5802,9521,2526,3335,8523,2193,8576,9034,8816,6775,8178,2784,5807,3565,4966,1735,3070,964,5333,228,5845,2586,1490,9485,9216,1188,2314,1463,9055,2149,8743,4828,3455,9738,3182,6071,596,2515,6411,1511,3397,3200,4959,3676,163,1516,209,282,3619,5881,5568,7263,2108,7635],
               [1,51,52,53,100],
            ]:
    print(f'nums        = {nums}')
    print(f'sorted_nums = {sorted(nums)}')
    print(f'len_nums    = {len(nums)}')
    sol = Solution()
    r = sol.minOperations(nums)
    print(f'r = {r}')
    print('======================')






