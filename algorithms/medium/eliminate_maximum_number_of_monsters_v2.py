#
# Same idea as in v1. But we use a heap in this version.
#
from typing import List
import heapq

class Solution:
    def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:
        # speed = dist/time => time = dist/speed
        # Calculate the arrival times of each monster. Sort the arrival times.
        # Since it takes 1 minute for the weapon to charge, we can compare the
        # arrival time with the arrival index. If arrival time is <= index then
        # the monster has reached the city.
        arrival = list()
        for d, s in zip(dist, speed):
            arrival.append(d/s)
        heapq.heapify(arrival)
        res = 0
        while len(arrival) > 0:
            tmp = heapq.heappop(arrival)
            if tmp <= res:
                break
            res += 1
        return res

for dist, speed in [
                      ([1,3,4], [1,1,1]),
                      ([1,1,2,3], [1,1,1,1]),
                      ([3,2,4], [5,3,2]),
                      ([5,8,7,3,9,4], [2,1,3,1,4,2]),
                      ([5,8,7,3,9,4], [3,7,4,2,5,2]),
                      #([675,204,924,874,367,861,526,37,76,721,159,381,180,874,439,653,517,62,234,891,166,114,719,331,915,195,753,828,671,149,239,561,934,528,274,212,309,734,116,960,829,722,813,582,885,287,61,942,64,38,79,250,11,751,307,105,177,719,863,190,593,698,364,544,966,825,210,59,197,453,824,212,648,96,16,168,741,559,726,219,933,775,24,21,228,680,605,101,66,328,58,784,848,303,385,14,656,58,397,482,819,408,360,772,645,102,213,759,30,556,45,362,481,245,806,172,396,757,554,448,162,485,212,392,432,516,41,697,660,362,323,897,337,147,501,450,794,511,945,92,797,552,886,714,160,914,764,837,241,319,18,657,891,624,936,550,293,972,354,830,365,559,109,914,374,318,714,387,153,649,397,813,189,544,575,705,167,200,544,186,993,656,983,73,755,383,779,960,231,367,134,205,566,335,190,933,757,74,456,251,623,547,181,82,387,434,943,457,82,736,192,77,523,109,193,209,787,542,422,12,763,485,598,22,236,866,504,55,439,220,524,177,479,380,680,627,594,946,4,957,274,259,760,813,991,892,244,400,313,817,107,602,733,694,145,110,624,428,184,849,274,906,520,336,546,692,283,215,350,343,101,916,747,596,613,506,208,678,863,485,70,127,909,205,433,651,821,848,960,779,445,607,516,76,990,915,766,375,993,957,527,162,40,664,905,75,58,450,386,113,822,632,36,134,213,363,667,421,57,652,996,913,889,462,662,457,260,637,370,161,911,217,738,861,987,224,732,918,253,226,795,863,34,934,598,47,719,361,589,129,629,20,25,64,53,382,388,473,524,591,679,235,127,728,946,135,912,339,554,29,934,30,563,603,243,815,938,105,437,145,92,610,186,454,734,97,663,516,901,597,576,821,399,663,748,300,900,892,950,997,220,887,880,522,349,647,934,855,655,651,327,235,258,635,555,262,637,432,406,798,794,157,544,565,152,228,158,128,755,199,15,583,511,249,701,224,576,462,779,922,81,740,320,252,6,12,438,47,285,702,651,736,892,871,751,573,575,679,960,832,649,560,790,901,624,667,646,790,328,792,395,929,80,298,263,860,996,989,365,310,219,700,800,387,556,155,165,531,35,216,377,108,757,530,839,259,298,341,47,716,191,352,622,782,142,356,884,793,857,469,240,70,502,369,689,681,767,329,555,837,822,199,991,520,675,75,134,355,533,976,223,80,464,719,320,180,736,354,536,155,380,955,733,822,985,380,419,739,265,686,760,570,574,339,84,789,577,165,663,68,515,363,629,562,748,101,860,267,743,603,916,330,571,154,488,447,670,260,898,822,69,694,908,627,369,124,459,409,898,912,461,959,56,491,489,352,552,48,643,100,252,178,275,742,233,594,716,53,911,383,866,339,803,234,582,222,681,524,65,261,902,52,120,534,600,530,439,292,450,630,509,445,843,653,347,683,782,798,826,870,131,36,495,680,642,262,704,471,872,34,25,889,683,241,469,152,995,162,608,264,944,872,463,632,432,671,767,142,500,101,962,579,266,760,663,414,648,783,97,24,513,612,97,952,240,717,217,562,338,596,835,953,746,642,424,858,1000,524,537,710,222,934,639,784,900,273,885,421,624,616,170,505,63,293,114,453,776,353,791,731,508,899,213,924,470,125,722,787,427,174,165,640,920,26,137,147,165,20,214,24,452,294,997,572,243,929,870,929,271,939,529,332,204,342,812,87,972,831,949,314,151,151,845,759,942,583,318,411,520,849,861,319,88,578,223,393,121,736,701,211,982,42,840,785,799,801,65,661,56,525,41,899,509,658,862,375,254,117,107,678,267,844,934,770,789,861,789,915,733,688,287,42,797,700,497,65,323,988,304,462,150,505,720,751,70,436,441,698,659,333,459,135,114,442,445,602,798,733,311,252,171,846,77,333,15,26,133,83,299,791,194,959,23,93,932,372,898,349,812,600,821,938,436,74,280,953,789,399,746,709,798,364,402,307,912,340,42,769,295,923,676,631,878,631,911,748,985,609,320,307,297,468,809,600,44,113,471,279,550,33,870,674,367,425,563,258,702,399,811,358,288,242,129,717,955,22,54,118,50,683,631,140,620,987,476,372,864,673,312,17,717,587,762,474,492,988,144,777,12,300,912,709,668,843,273,965,430,731,571,501,204,850,870,463,291,574,883,649,11,244,972,933,392,969,76,646,198,655,77,508,596,100,238,215,621,918,532,490,324,267,323,461,913,900,549,598,165,446,489,430,853,801,205,688,178,432,687,341,183,57], [519,833,58,362,815,87,272,923,69,495,577,772,655,53,282,210,213,164,896,432,804,453,109,335,876,291,603,682,943,728,65,743,37,211,826,678,656,774,140,647,476,198,40,740,363,359,511,966,410,772,568,647,520,759,358,175,927,762,235,938,232,849,371,709,460,398,841,161,769,912,975,594,453,969,822,948,40,80,170,624,366,461,552,992,96,536,390,209,437,254,355,665,353,78,743,342,524,420,499,990,619,309,221,124,40,939,76,279,805,112,923,435,39,624,430,588,270,97,510,932,173,103,417,625,53,651,933,977,532,497,377,22,794,477,720,461,170,140,789,24,43,742,804,365,927,809,915,183,774,336,49,650,293,379,833,488,668,661,952,704,811,152,302,475,929,49,878,955,773,502,282,740,70,529,968,107,299,208,206,700,585,461,674,474,93,64,920,99,533,1,763,964,45,929,641,569,800,554,786,787,385,82,21,692,299,632,338,872,454,898,109,167,158,355,975,736,764,999,429,198,540,826,252,960,364,769,669,849,247,407,643,399,792,833,668,794,753,69,516,965,305,499,110,283,920,473,639,233,434,702,860,821,970,257,216,121,254,59,986,41,770,685,842,75,414,765,459,760,627,595,265,923,666,173,684,767,990,461,660,326,490,810,75,112,62,208,942,416,714,500,606,316,145,948,107,43,637,714,412,258,60,985,870,199,405,886,266,962,929,515,189,843,627,993,406,135,910,611,983,481,229,720,178,892,729,839,415,762,378,573,271,99,183,685,223,448,442,410,498,801,440,316,254,667,666,471,778,583,860,407,303,817,345,939,162,339,359,72,852,129,717,411,51,289,661,641,487,573,1,741,529,458,805,737,327,813,948,69,190,544,539,334,262,489,827,156,265,449,795,441,811,818,832,877,200,668,915,324,485,253,402,407,898,778,254,363,798,825,276,626,742,433,537,445,176,225,789,588,803,717,99,494,832,808,352,14,745,617,982,670,917,615,688,698,532,497,434,615,501,570,498,417,460,322,815,373,539,407,411,438,90,326,233,294,145,45,582,929,536,388,743,361,390,95,333,941,182,668,368,362,264,845,94,648,724,51,888,903,93,23,917,416,216,148,500,578,484,994,155,406,991,78,490,326,852,350,174,929,763,319,116,747,801,815,470,249,739,335,419,596,442,916,862,455,741,78,490,132,43,57,113,806,127,24,257,233,538,29,748,54,284,635,575,571,875,557,87,946,227,239,412,570,198,637,39,942,487,446,307,820,785,332,292,984,468,527,487,584,92,161,158,621,793,757,567,449,223,311,348,177,451,978,928,443,636,422,337,521,395,482,978,661,43,547,520,336,470,79,455,13,989,843,422,286,493,672,913,795,131,491,676,423,385,795,118,667,429,789,671,85,446,151,657,777,176,240,477,59,911,69,885,363,841,167,759,52,372,973,311,605,435,92,748,953,238,167,646,183,768,521,86,713,399,311,908,481,992,573,615,613,908,50,945,57,388,802,780,12,381,761,298,491,940,468,557,400,75,482,590,752,855,76,497,895,409,202,66,645,998,831,913,594,472,468,470,445,97,239,248,736,459,500,77,168,685,810,181,503,295,162,463,254,408,562,89,466,798,621,161,850,675,663,445,824,699,874,656,131,990,696,483,145,596,355,472,412,78,892,615,360,970,766,107,941,80,137,578,921,842,773,246,238,331,600,944,844,560,427,247,407,261,326,977,46,994,397,328,828,60,51,560,996,885,309,200,782,221,322,833,254,994,404,748,581,937,995,21,123,124,202,526,216,131,386,790,198,10,329,448,202,288,991,578,250,415,320,269,648,750,417,864,678,345,671,712,708,246,940,200,971,254,843,833,330,331,23,126,806,243,595,348,892,361,414,912,233,697,287,223,748,612,575,533,445,809,410,966,646,908,832,569,20,422,80,365,602,850,185,726,558,329,295,830,8,844,73,550,917,241,870,392,355,804,232,365,399,567,321,130,12,770,805,489,70,479,699,207,559,676,238,145,346,521,201,921,452,616,57,247,468,337,962,242,588,60,5,670,826,992,197,578,731,193,7,763,302,980,571,948,800,154,914,782,289,454,648,242,421,24,584,239,681,105,889,901,528,981,333,449,926,668,256,12,623,468,889,675,958,992,645,780,723,632,979,35,101,821,972,545,207,458,338,285,929,994,422,350,329,654,75,80,674,656,154,89,583,843,670,926,76,418,263,549,964,719,583,784,365,259,152,867,925,364,810,861,33,246,282,175,996,192,628,972,708,552,299,353,183,347,916]),
                      ([4,3,3,3,4], [1,1,1,1,4]),
                      ([4,3,4], [1,1,2]),
                   ]:
    print(f'dist, speed = {dist}, {speed}')
    sol = Solution()
    r = sol.eliminateMaximum(dist, speed)
    print(f'r = {r}')
    print('========================')

