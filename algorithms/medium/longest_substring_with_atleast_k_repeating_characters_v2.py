class Solution:
    def longestSubstring(self, s: str, k: int) -> int:
        '''
           Sliding Window - we can avoid using the dictionary by just using
                            a list of 26 elements, one for each letter
           'abcxxxabc',    k = 3 => ans = 3   ; max_unique = 4, iterate from 1 to 4
           'abcxxxabcabc', k = 3 => ans = 12  ; max_unique = 4, iterate from 1 to 4
        '''
        N = len(s)
        max_unique = len(set(s))
        res = 0
        for curr_unique in range(1, max_unique + 1):
            #print(f'curr_unique, res = {curr_unique}, {res}')
            arr = [0 for _ in range(26)]
            i, j = 0, 0
            while j < N:
                arr[ord(s[j]) - ord('a')] += 1
                #print(f'\tj, arr, res = {j}, {arr}, {res}')
                while sum([1 for n in arr if n > 0]) > curr_unique:
                    arr[ord(s[i]) - ord('a')] -= 1
                    i += 1
                if all([n >= k for n in arr if n != 0]):
                    res = max(res, j - i + 1)
                j += 1
        return res

# Main section
for s, k in [
               ('aaabb', 3),
               ('ababbc', 2),
               ('abcxxxabc', 3),
               ('abcxxxabcabc', 3),
               ('rhjakrpjkmiynkqsofamwineudrumdbgluwwfvjhyasaeknhfjqytyhcofadtebcvmiewsxcwgogyfcshdlwvbauajczlkaznyer', 3),
               ('tzrtfjalodkoucanwttrqkuryvysrrxjydqiltzstypfsviiyxxzhykkcigwxrmywmjsqlaspktmwvailhiqkkaqnqywzgbdfkujijzeliyerinxxylabfreysiaaqtxgjlfokybnaghplqhjedfuqjmyeccvyatkrtionrmsrylpbhuhsbeyumjpbnlnqyvyrkxxeeejoplkyuswwtlubmbsvnkwzmvaiowjoksvsruiqbrjfppestgdsaqvbghuxgvdqmuvyijbykuaqjbtopfqybgtelovxxfghoykxclllfuwjyoiqfdqhyczsbsbbymcvzulzonrwdlferyyflndvtzsyovsgtfrbqqmzxfmyorzuskfhvjjgbrmdxkblihtvqbdaokvebgvgdxltzufnlgncowlcnkgtgxmfvkydrtyeeavlulmphjmzdtrsxuitsktyoxmfdtivmpyzqljcuectrvsprnawprmbnvkckgnsrrcbamisjgyiibnkulzfxjxewetnxkdgeuifvwbwczmkawoqhfcbnnlsflatbpeohevhtwrqqhyeaidvmsmkashedyveguevxpeszysngwkbebifuceykugiapliwbemcyxonkcfjzupfnizchxadgcyeacomnfnfowoynvtexhuwqyrewmnurwffzlkylbfoswqausgoifoligmatetcdflzeuuuuyysyqxuvsybrfnoygsiobpqkypcqewutogbzgtkdgvwdnnatfmxugugoaehxctsnbavkmsiwmboqmsedsmxdkcgsjksgfztjfeabhtrilokxjmssortaocawexlvbfbootnlnvzukxtudckqvbwuvlnoxgquqbfniorzdrmceowawgejopdpnaspboodaahdyeioebxdyxelbcsyvfadjtvkpzkilnklddyytewkpaqwrpkemadegkiuthacopqcufvlpngtyyevvnnxgtgjuooh', 3),
               ('ufgqwsymvvfntpoemonhrzothticntnywtzmbgkflcjpkbknokdixaxvzviyasktyfzlaoxynaxscqixvqwqkgrdwtiuebrpxxxriuerxlilfxdyouzueyjhcifthbgmvcycefqrbouqgargrdzznknnskkztjmikmccbukcjittlhcedizdwezabehgsqoecjygullhknknqsodpsgcdrbrcmciuciszzrzmooiewqdvqktntqjlhxeaglmwqmgymybmlzorgaftrxepbgbwtbpsxidbyqucbqpkhjjzqawiexmumxlcssadalmqmhabmpvqulgocttbpupgtihjpwsbtvkfszoivnljcofvfsgzigffznuhwwbvlxerktouvkiyugvtpyqsogikzvcwpkzocktigszfhdosfpahkmtyneohabuzsfihkiegfimovqnaihdotcjfbnstjstcljevwxjynnpswuqfavoimkywtwkopnrrueoldwzldwzlprcrypnijlqzjxiazmjtofgcgutqphnokjtnexcjsdhcnqewqefoqrgcpdlnkuhzrscpedulfszwunyaduqdcrjqunrsndgehgbfvdlnrxcyhlsusrbsrpsqsmqkojmzzniwpdswuipsyxdvvcaeeideibjamrkqyfvkmithuunqvjkxlxlyiegcokslbtxfgmefttjkdxvkuejdzrkzosdxbcxgofidgqpzczvtzxsgzounhikqvuzciajwweuuxazeqegvsknbtjqystdvtgabisnwjbrjhmacgbgszgicpaoaeahqrvfvhqukwqeqvzdygyqdhupvszeotdegqgkbiaxxoqhecnpkfivbmcrwtepgwdyzynpwfnjmjznniikpojicuyytjjlqmoovqazeahtrugkvpxyhgbnghamdxrlwsyeviounffzrtseghqnpdonjabldwzenqqxxupgrllutxmxxdzraovrfdcwoporbwaxoptpjhshauwkbayjtcmmeyfjqnceszodjqflkuraufijnjipigoufhpumkafryljobctivnisciadnumjzhfdbfiomjdljkgpcrzsgzrgprssnwbwpjwfhquidxbagpzbfhivvsbzlmcpkenrsakzplgthltmuikqsvawoturjsxwluiunxxflwwcgfnndadsibinndftxaaclrzhfgtpyevctbgjopmkfeskkiravmolezevzverrsgsocssdynqjapjzzzeqhjxyyqlkzcdjmvxikecbdvblvwzemenjbspbalzidascevscqqmjzfjckzjncslrymkgsujvjmcshswkhrihkgbxvviafiskfpgjimixscidgzwjsbfwyqewdytfxgvtkqwbsczqzurprqhaeyldgfhpqpyyypehxjyporbbtvxzcqbprtfixpopthhpxogahkmcjinasfjrqxmrhyomkoifobfrzvhacevyhxqjnejkljehlrlfgqmhieolwthlgsqgfoisbunkrdahgggqxovclxerpqoyuvfmagqcytggywmszmglqyirpsiqrttsihlxxodnziiwmjknzrgywwsywejqadqdbynzhohzvybjunbkzxnpgjgnpxqwdynawqnbffmhftsslibiiztobpfxnglgsfdrvtnrriwptmjkqcdnrrrenxmbdllfojbrzlzcksarnisgqteqbowzfhitlhdqlkjokfsosoafjqljnrbmaethzjoangmlkyhvacunssehguxomyowwjjhlxpgvradysmhiguizkhnbdwscbkuuixizqthalmwttzhmblpsfmmusnjotiygzsnyzmxcapluoamfimpzctyyouqbqygdrmapgntkogbkubizwvyqfctvhmtgthjgyhoqrqlskkianhihmrlzdnqpcyzlrejrofefzsvhdkcrfrqmosmkhsdjszlfrhijyvejndgikcxmitmjiyiglfvbkyubcrhfuaorxvqrjovqhglmydgcahdmwpsposdxwdwyuslisikkqxdkuuhywipkwkiezqbvuunbzaoxtqbznzehltzfoxlogliovfhdfbfbjqgafhqbtsxymqybbmorpyhdeqopqsajethoivbxdilcvokjlvyetryjleqeyfbcokpdvigohhucsblazphvzkvammlvarfqsnfvglmlfacfboouwgbipcmggexbxexttvuofmgmqjnsktllyozqjujnisrjverfsdaailgltbcjlhkpdmgkfpsirevifuymatupwkfzqgzgqqlkdwzgbgcaahjfpgpebuivdkqfodzhnvcobcdehhqrefrzvvdunhoheafdmdbvtbgwvwiuumtwcjkveozyxucnrffcsucrzlmcyjzlaafmnanketoexjltdvepisexwklwleagmgeqepqlinatqdcnzrjudwsetzdugcasybxgnxdbixwvgqmgbwokowyfzapezgwzrdfgqvbrlejaekxhoimdlbosxdbqoiczqfvuxgqhqzgkvnjzpjsfsyelnjaghudipaanyhilgqlevavuachqeyqofbtdvqopjydykfaxpqytjxrbidgpvapzwkbrcuzaondhhkobzflewefrshlroepsjitjrlzkjiamhrdwgpdlpmhzwyqonodudwrpxlnyvclzknnixdoeqqydkevuczbpomvdoaileewkszwpdafpighgtvdiwfbskhapjrwvqmkvhotlkewqolbyvxlxidaeapyccpstcbguseclhqxqjutrgdkjgafzepgsakxbaunnhhommrlsdsdkdxwpivqhokohlzxprjeogpvhlsctydkhkmyvvhdqgkedtabwpafajlglgqktniapagueliwtbockeegyaushsusekjhildwbfcmkqyvreppazxpysayquvvxttwydghgslcilowhlodmqjzrljhslxssbsjjjuqseqncmujukrjwxhtdonbbzzsaweqfatqcsewmdvtqvazyzdvbfaanjxuyczjquqwcaoiuzhssewjoaestdnqedhskaiessivxfrzyuyykcgmzsiqiaserzjtqzhwydncmgxquonyxvrhuwazmopbexdzfebvnutmciiymtxdyanqtabhrmuorintfecjhiffkamesgsnzhnapzdoneugrrkofuomfsmbzabtyvixcwewdbdpuuoqwhctqqutcxvafrwhtbkygnjhoiufwohhkjuqbykiioehbqecgbmxxotpxzovnieacvshncxlmexxwvczqnfsbdrnfygcladtzmmpwcxlozkygjyyzxwdwlzzqdysvujwpwfignqpuyigwaxdrvkifuvlrimtdxcehkwnsuwhvatmoyxnfflgwxzpvxefawkyargkqshuehywxqqqmykxerwwowunodpieixrxaweadiwtyxwfiiwthgxjwntgusbbrvkqbcxzixrlwtwftqidzaiupvegdpfalnalgoyxjpijfiqihngvhwcvcerhgdhzlihmlmnhhrxybuqvsiihupijbfswuijozjtyvuuoczfzanxhxzprivpiamdtvewontkziecfyuyvafecrbnpgcmuvyqmfyqrjpgbepseeggjxouatxsbfgzbaqpvogwdcbsekwkvzaamdxurtphkabxazszwaxcnakqfkyhvxqbcowzvbpsnuwesnxhfcyvwoxezzryambvihqdmrxhadbbjwvpmngymirwzuzkescdbrxduuzypvceegqngjdbwgickudwcbzcburkyijphhpcuneqjnxsedaqwvcgtfgnyxgserelozegbtylmxfyjqkfasqvblzhlvqaehlzqthocxgvvrmzkxisgtloqmzxxqkxkkhbgfueneupmsmjzscgxnynkawbfnevcbcvuwiwtsmsnoazuixmmbamuippktwtcjnovrihfuccmywqqrlksxqzjwhyuhrxuxndyhtafvatbwdvhhfxnvelqvnrrjzlpnahanmkqwtwptwbsffidjtgflpujsgwatixwnrgnhvwdpomylrtnjokefronordyolutaicrtpnzwnnweydunquwmsvceyzukpuutookmvxyjbaxodyqyfonesnujmlyyneywmeyzxbzwjitmfifvbzrwwlchjlxltvfoezypworwbxhwnosmtyvcvqldlipstwyviopspiwnolpadwctpvovrbibhpjhkpfyzqpdrzavcxwtlclpmxwzozrvbflkirehiblfslboezuxpmyrfmflkzkkuvxnlsjuwdkfxvhkvzyecftrbsxybzazfllhxxogeyfquhskxpmivdvvtaqrbqqlfwxxxjuuktuhlcmdvxhqdvyzyseaetyeklpkhpztpqopffbwwdftqeiljfoelymgqmpjozgghuzlgurrvgundzqikczydwvgfhjummmvsusbktcqbpmhxodgaunggjfiyxpzrmkiqpcmlyeaarbjbfelojizqbxgqndxjpmpeqqdavnatnesaezktmvymxkncvcdpzcblsevaczztlmnzhlficvrmnmmnptxotkphcpglgiuxaccserorrnzkzmfrlbegcycnrkzjzxpchiqkeobzjyampmddubualmuftojmqxigtzsdwlipxgptksagskmenuccuptioyldeteypblawkslecnsxiywzonhspqpuylffbkzneycaspnnhlowcdkivqvmpcpndrdrkhdgvcmqratnxssfhlnkewropfsahwbyytwdiotmvzjkbqipvkhrvcxqacsodpuvtwnvyvvtathzlzvkzgstardndbjlfdmvpctfcstzmrpyrzblkruvgfmnjgyihhyiguvmmigvydoyazcjuoxwculnlbgingybnombncoexdamsgezmnmlowfguozrzrsgdnixxyijnoipbfsliqoxkppxxeqcylwbqgjsdebzenhnujrqgxjpqlouwajzmyacnmpxhcqomxazwqyehxordvfafjidjqnvaovfvjjtjqezopurqmnhdrsyeghlahutbmhhgiykffzlnuciewrcqtrpowyrthfyuxztwyjvzdgwjyufezcscnmitlangynyjdpkvnhxlrniemwwjdozmazdclsfebueagmxnqlrjdmhondyamixpxjegfyqzmsexssfvwartkyrxbyhdxpqiyizvwnmdyduqfhcpgcohlffcaaldmaqqiydytjhgiqcojjezqqvmbdwueepfdrcpnqakhrnbnnckihgvtpeajztxlawxxipkxflsfsxuxpayfxdiidgmetjsaisuanpchlfqzlhntodeesynkljualcgvixkpzfsgohldhanmgldnxpcwbxlryrzzvpfrsiassydzvhysypyborzyteyckzhckrrsxncabpurcsjhvxsltpzjvjttkkuzgmaxiuzlktyqbijokkiasqozgsqqlrworjzxgkqypyyuvxgjihcnsdfhxrvdduempveuzancfmkacyzekqqlzzvnqnxofjoivylximnfsqskmoibuhmkcxigosfgmmyzfnlcksljhnbgjlxurstwhcwwibexxpulohfdyekxcwxgfklvzkdkppjhefuftsltmnsokgkbwsizjfvfzfsjtkqrwkoakygsqrfxtmklblughialzsbzmqujytnnnaiypqthwrefbqgnehetzvsjimunqbknfsxclonmjtiqoofdzqueacbdxoxuhmthoepbrpsojusqpwfxvlnndlbceocrigjtuvadmvfqihkldnjkqaiwdvqosjmsifmlvjbyvrhugpqikdiabarmmmclihjcehibtfrvgrgbscetqdhgxuomhpkcptfvgwecthgpjjhxubwpkcqmkgkqaosbnbctvifhyovdlyehofenxmbjopqjbglpjsmiigdptueynrjifhsmcbckuzahlyrakabkhxsouwwkfcatfcouyuouozwiykxmzfhncdrpynqzsauwviuzmcmnhknligpqghpfvmntghqcurrffrrsidycyrzsrzpmkkttroouqpllccxczvitwfxfzsptmkbpszydrqdamcazkibuxecnxwcdtcvgjdibpbykrpkqbousulndezymrlrrrsgwglnnvtcdxavmkbgexzevuvynwlutnpmmcszuaxovccyimhgzzwefryexhidujvudocbobwzonsgophqonedgptayvklkszrcgezmtxhjygsacmmtcjlurfycqavapmobxathrtswnhpfiqihuwcchnhesrsouopoleunlgwkvddfntndkcvtorerlwznjhhagggqsizejstxbwktazgznvgdrvjjlnvscailbvgleinofybwnlhccfvrttiqbtgelukkjldlrfdtprqoaacfirofdjzjaenxnvkzqpimpstiddunobyspnlspdexdqtftozqexmcdratpbfbyabfynbobmzvhsztkoelcanptpgtgaialkcinudvtlqlawefqcztrueneugwmpfhkjtmjotcfzevbixdfsljxnyjmwgvgdrhbpuvbfkuxjfzskupldzzyesmfdwabiahpstpnkewwijvozqhjtfvfrztvvysupspkqrksghjllpvrvybtvismnkdtfngxxlesoptbeswedevwwlfzpgrgqxhwfzodbfnlsxcdqunukxjokkflyicwldnijjcovgizntnxljdpsrnsyxrxqterxiwfqovscvlutvevwxilswnmlmmwazqtnbeszgzuqscxsnogteqbkrlbbvjqcaprdoymyjdupgtwhpgkjqipdjtbwsvmlcdqzbcromqlrhcnbzwifuqlqbwujmvqlppnjrimpbwppzhsujwcvlxwihqobubtbmfhutpsaadhttxuksnsbcdzizwlxoicmkawoodjewzrkavvnazaroiajsubvwgumrsnyqxjpcatewnfvumbbjotwbchalxjreorygkyzrkcrqdlxmuiuhgsqxtpnzcizbwaqjdbdcrnvzrgimxfcmdctxnsnkfzmkcypxhucbfcahrboxjuzicjjwavjlrfnexjrtrolvdrmejwqbfhbkauurapxxwsgzijxqrcdlgfekgcqnbxlsjrpcuvgnpsgwlitmizvpygwvdcfgqbqkkmxzwzyycmvnmcbghdbnxsqdglqvjgjqxiaojkbvnluppuhebmgqqfzbcyobidzmnqjsvaovfupajlijduwvlejlpemkqrjlfsyliyvvqpaxyseccmubkmnfplbztwvlicadcbhfmwmflitmkhevtnthehtalpjdwqlpqipwwrzcfwtbrjmkrhobzcguousipxuywytqlvegsjgnzclcpvbfghefqzrrhvbiohciwfznuoubgndzffezcplxntusbmmjgfkcyuowwpbdshkkjosizejvnsycktjdidkskwqkakxniuwwjitwmdmefxugoqmevfijutqrtssccgdiddemcdtlnxvmiqmmcihkxbxvvcgcwemdbwntewnhcztfxzbajgbklgsusbzwmykrayzdnjliaevrjsnaotvuukxkrsiyhqdhwjeptoqccmoxtqjqttnfdwulqhkltnqbuhigscyenkfugwtyntxwtubgrjlzdmfddplmjmmigaoixrkslrjbanbkcjiwzwjllpljncxanpsyfrxkwromjhkitrqruurebetibzxxnccqijgogtoasmsnfpzxpuvmaccpkncuodmywqgibjtmcjopcmaeuquvtagvbuzqofeedwuhyfqspbiqqcixnkiclmzzytfilvpkzdjpeohlpowosbyffssbhyhjakevnnigsfbthbpqgdqsoswiqxeffrmaoohzetsrbmcsfvgrpzmdqpwozkjcmvfcelhktpbjvyvmesmjhyarnmazimrhfmpuynxuwiociqdkcwvnjgapveajushfomtmafwgpoqbitvahupxachptqeprmwitedfskuhdevyzzpxzktsynzpcdpkjtggnbriowlxjscahqdquxemukymqijokyjxhljswdqlqcwpxmlezbzjhwhoxhdwamicsnjkviuiwugxdskggkrrvtvwdcrncvnfzsbfwstlvfpdyiboeuhavzaepschbyxwpclmriuhodcjjiygdvqxbwaexoghvsijejcvnnawirqjvrdotkfkjyjglaheplfjwkvbgflldtmppulnynqwyqbpkfoggburykvhgmdonwagnyxepqmiegypigtyssszqnsrfwyivauuhovrfcudehogkdbkcnktlzyivhumrkwspiclxkeqjkulubueggqmtlijhhjuzxslqkfhvthdamjvvaekztbsybiunlanoxbjzrszaaszzbxyqlkjujerlracmctrqansvlqwqfogojrhiezcpvoqhriouixsdsmyzdwuudxiczqeauzguoyjiosiesufesrravoumilxlioqlfgintfvebuvufntiydybjurvwrcgemelhdxfnyrmbyfnsomxagmglxezronexopvvepdakqlyjvbrylqjjjtragjfmzhiukmrmytndhkfvxnoflfvcigebixniwdigjjemujeoaflicanlokghnsqrmoojlwihpqafqgpwtvpdujjedljblhvbnvwypqszvlqjvgzrkwlwmyrswryxnebmdbyihjwpasbhpcpktrdfeehdymwnbiblwqfgtvcelovcbuzilmdslxlssdwlctjmidvzuognzrnwlxoxivdowgvuvnyikwadnieqahfnanuepmqzbfceuywqtizogqbupapghmwlzklvsvebchsrwbnihoeryudkofytowwuypysvaamhlylocdzlgrwwukddzujydbbnrfqpzezufcgdnttrwkysaaiykbwsfzjvipklwncrdrkdxkzfqwviushkxkumxectdigtomfdusgwfdcdevqqqwlfjyshlyhoueexzftpgnjzyxwhyhxvhubkhcuksgelzohgllmebuohlrukpjcxgxsaqwbqszxogecpubpeujcoizmblwrqzzqdyryhwsxintlzqfshobzvuclbgrywgcryrlsnvnwbrudxtquletpbfthrmrfnwzzbtotbkmnjzysavzlvnhmusruwwsyrbdnmguvnmacghpnyepmtrtkpvaaqsevqyjtpcekmqnqcllwflkfiuofbqqoxaznmyhzwhvtfdpcbgvsdmcinzznzahkpplbsjkulcfqttegyfwwtgkbeirhtpeacubwvvuzwcudispxxvfmzpeyzvznpeglhxuwxhmrimdpvszwrwftgdbvwojnyllxxqpoldlrgrukqezvfuhbcqwzdjmqwlcmxtwmvkbyrxqnyfgtatypyotlzkkdxttgfrmekiwvyjvffcvyjwdukhbokhepewlgzmicixuuoilpblddnojklikxrvpukqlsohcghdpdnflyagsgqjvceswdjvuhrcdkpfiyxcafwttjhnsboztkgfsniczxtiwutjhzfvwuxbsutpddurzaevzswdhocthexrgqlffuvcumggoflxeggdkjyzsdmhcvvsdehdhgmbkmhmpvmkjlwecfnpjqihtjgpbwfcnesdafkbbrjvvlxyiblxolfkntmlammriaczqwaovzczgpwusksjysppktxzcuhofoscewyuqxihvqmcoikuquazdvrierrkyscreaaabcttpurbhmqpnzqlsbcoofuvxhzhhykachetnwar', 9),
            ]:
    print(f's, k = {s}, {k}')
    sol = Solution()
    r = sol.longestSubstring(s, k)
    print(f'r = {r}')
    print('===================')



