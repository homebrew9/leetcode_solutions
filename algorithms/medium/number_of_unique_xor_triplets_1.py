from typing import List
import itertools

class Solution:
    def uniqueXorTriplets(self, nums: List[int]) -> int:
        N = len(nums)
        if N == 1:
            return 1
        if N == 2:
            return 2
        lim = len(bin(max(nums)).replace('0b',''))
        total = 0
        for i in range(lim-1, -1, -1):
            total += 2**i
        #print(total)
        return total + 1
        
# Main section
for nums in [
               [1,2],
               [3,1,2],
               [3,1,2,4],
               [24,246,228,122,76,233,289,35,341,144,127,218,275,327,51,280,326,216,253,74,337,298,271,86,342,284,38,80,157,211,107,18,136,133,236,206,214,83,167,317,255,149,307,101,153,281,349,8,315,13,320,28,175,113,10,310,178,340,75,145,56,250,282,184,351,202,308,91,48,137,357,338,146,102,294,186,135,321,125,89,274,260,224,329,257,158,354,328,58,245,262,131,3,217,6,124,360,339,314,210,247,187,169,243,141,348,88,163,20,267,361,130,239,5,4,44,32,333,242,203,295,325,179,93,87,174,336,358,285,54,368,150,152,7,299,11,193,241,26,188,209,207,182,365,138,70,277,134,90,303,304,123,84,73,68,230,114,356,117,72,95,108,300,132,2,343,148,33,347,15,46,143,142,16,126,177,237,50,219,103,291,292,192,201,176,221,162,212,52,200,45,34,60,166,118,225,57,359,23,332,180,156,109,185,205,355,96,199,42,229,49,17,286,366,98,78,352,251,129,22,227,261,183,27,350,232,194,362,181,62,111,293,47,36,55,31,297,226,19,40,220,65,276,99,105,279,256,106,197,104,248,264,140,319,25,71,151,301,165,170,311,367,313,110,344,353,92,1,112,287,249,66,330,324,94,331,53,269,172,240,231,222,265,30,309,263,190,81,346,258,12,273,272,208,223,43,213,69,191,252,121,345,335,215,302,363,139,119,290,312,283,116,9,159,322,14,173,29,77,235,234,41,259,296,97,306,198,364,59,128,155,67,168,63,147,64,254,161,61,39,120,266,82,278,195,37,244,154,196,160,21,189,268,323,318,79,305,316,115,204,171,100,85,288,164,270,334,238],
            ]:
    print(f'nums = {nums}')
    sol = Solution()
    r = sol.uniqueXorTriplets(nums)
    print(f'r = {r}')
    print('========================')

