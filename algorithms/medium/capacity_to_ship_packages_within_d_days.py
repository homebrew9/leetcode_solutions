from typing import List

class Solution:
    def shipWithinDays(self, weights: List[int], days: int) -> int:
        '''
           10 => 1,2,3,4   5   6   7   8   9   10   = 7 days
           11 => 1,2,3,4   5,6     7   8   9   10   = 6 days
           12 => 1,2,3,4   5,6     7   8   9   10   = 6 days
           13 => 1,2,3,4   5,6     7   8   9   10   = 6 days
           14 => 1,2,3,4   5,6     7   8   9   10   = 6 days
           15 => 1,2,3,4,5   6,7       8   9   10   = 5 days
           16 => 1,2,3,4,5   6,7       8   9   10   = 5 days
           17 => 1,2,3,4,5   6,7       8,9     10   = 4 days
           18 => 1,2,3,4,5   6,7       8,9     10   = 4 days
           19 => 1,2,3,4,5   6,7       8,9     10   = 4 days
           20 => 1,2,3,4,5   6,7       8,9     10   = 4 days
           21 => 1,2,3,4,5,6   7,8         9,10     = 3 days
           22 => 1,2,3,4,5,6   7,8         9,10     = 3 days
        '''
        def day_count(ship_weight):
            res = 0
            curr = 0
            for w in weights:
                curr += w
                if curr > ship_weight:
                    res += 1
                    curr = w
            res += 1
            return res
        N = len(weights)
        # Note that 25_000_000 = maxWeight * maxLength (500 * 5 * 10^4)
        left, right = max(weights), 25_000_000
        while left <= right:
            mid = (left + right) // 2
            #print(left, right, mid)
            val = day_count(mid)
            if val <= days:
                right = mid - 1
            else:
                left = mid + 1
        return left

# Main section
for weights, days in [
                        ([1,2,3,4,5,6,7,8,9,10], 5),
                        ([3,2,2,4,1,4], 3),
                        ([1,2,3,1,1], 4),
                        ([332,209,125,492,472,314,8,184,410,39,85,45,351,44,444,354,248,335,70,68,302,65,128,177,54,57,364,354,48,317,164,408,4,500,208,494,378,392,413,213,499,219,106,307,124,36,359,455,380,471,24,2,188,235,164,401,104,378,10,223,265,405,215,71,414,338,81,310,483,338,193,430,35,220,314,464,22,83,150,362,296,349,35,32,10,162,433,52,121,407,97,330,4,248,247,25,78,339,262,492,12,275,112,89,110,79,135,377,309,279,52,36,462,289,99,350,108,393,121,251,373,493,457,400,295,300,198,192,289,485,423,399,283,284,344,21,340,316,356,56,464,94,152,479,59,185,100,46,232,208,63,337,175,394,117,300,425,374,153,382,154,208,77,422,384,365,371,98,136,432,95,236,217,344,471,441,103,276,374,134,246,477,199,79,446,330,316,498,497,261,335,374,179,285,303,47,64,434,159,269,379,215,424,307,473,141,141,156,223,376,125,128,379,326,462,337,73,50,398,472,306,316,159,278,433,77,82,419,196,158,330,79,64,295,460,267,185,126,181,162,200,361,16,303,196,160,253,7,139,46,475,483,81,54,479,207,165,482,475,292,302,477,82,319,44,383,6,495,383,173,300,260,422,247,202,102,174,55,371,369,313,371,210,13,425,500,458,403,205,179,336,301,438,299,116,317,106,393,321,22,346,27,331,207,95,315,96,341,322,172,14,371,214,140,500,144,100,149,353,97,76,401,120,442,398,340,470,387,141,256,275,430,355,272,177,455,251,389,148,184,205,268,47,205,447,399,35,54,301,269,136,154,482,166,329,200,199,76,361,341,470,242,6,351,51,129,318,436,39,291,482,215,348,62,83,249,400,197,351,269,309,392,23,284,54,410,270,279,428,317,385,195,43,240,40,292,151,391,344,13,396,204,425,189,376,424,206,299,65,143,10,382,479,261,392,356,85,456,201,117,374,46,428,478,322,116,431,205,182,279,208,360,441,89,162,62,238,177,24,309,327,449,69,129,489,241,305,266,371,99,32,113,451,340,491,474,267,78,500,401,216,105,272,307,382,56,19,313,290,267,448,370,402,127,256,441,429,428,289,90,372,211,430,134,380,405,388,377,233,390,162,279,406,493,26,454,374,386,343,46,399,44,113,14,470,243,80,374,198,412,71,379,101,32,324,319,390,499,34,444,396,178,418,176,48,108,484,202,219,34,411,379,299,112,346,58,3,87,440,371,258,59,463,203,182,133,244,307,301,325,340,29,391,411,310,377,231,71,105,411,430,412,359,78,227,488,99,182,192,186,119,249,196,181,134,166,30,1,253,286,81,303,431,84,154,254,460,157,40,279,449,331,182,275,321,343,149,3,176,123,419,30,66,426,334,419,17,385,393,59,63,393,152,44,472,241,376,90,98,469,248,446,417,404,131,407,249,389,197,413,423,95,335,122,487,99,173,150,220,482,6,274,154,76,337,272,351,445,428,118,85,10,123,387,253,97,47,223,313,174,287,251,360,196,498,493,396,287,38,324,176,169,187,74,57,499,79,1,161,440,433,123,329,437,296,12,304,205,297,427,232,360,281,440,160,101,145,283,311,319,208,77,457,449,12,167,436,262,419,481,9,339,414,244,16,108,357,343,118,104,333,70,99,353,193,20,61,403,272,132,407,438,449,144,80,2,336,407,55,251,423,52,87,275,117,387,45,478,475,53,241,35,211,432,246,473,134,483,397,171,358,468,279,359,13,124,483,236,231,178,487,373,455,313,214,107,372,210,228,38,116,67,204,101,347,288,384,499,34,497,345,101,427,53,100,334,119,103,239,434,95,494,127,100,58,484,54,399,310,332,408,478,254,423,79,424,14,99,56,410,131,50,81,246,435,201,102,324,494,34,403,215,342,87,30,91,460,174,82,204,24,399,306,333,109,384,207,86,75,204,412,365,23,85,464,246,22,156,10,17,116,479,1,335,251,143,135,193,390,396,459,178,380,42,428,436,199,452,15,106,239,396,397,95,232,42,486,167,49,305,286,188,83,199,355,272,266,232,98,424,339,363,86,135,34,350,230,210,464,431,451,256,307,66,141,491,457,357,201,19,478,441,324,91,390,67,487,190,468,384,228,318,411,78,375,386,464,262,99,233,356,421,371,226,373,176,207,173,163,349,399,373,35,225,276,161,280,204,483,165,435,435,404,207,434,21,28,424,314,284,430,37,372,216,294,114,216,474,349,353,188,307,203,139,437,152,23,22,461,366,466,89,449,1,480,71,26,433,341,217], 901),
                     ]:
    print(f'weights, days = {weights}, {days}')
    sol = Solution()
    r = sol.shipWithinDays(weights, days)
    print(f'r = {r}')
    print('=====================')


