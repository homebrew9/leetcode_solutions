package main

import "fmt"

type Pair struct {
    row, col int
}

var directions = [][]int{[]int{0, 1}, []int{1, 0}, []int{0, -1}, []int{-1, 0}}

func dfs(r, c, rows, cols int, grid [][]byte, seen map[Pair]bool) [][]byte {
    for _, arr := range directions {
        dr, dc := arr[0], arr[1]
        rnew := r + dr
        cnew := c + dc
        if 0 <= rnew && rnew < rows && 0 <= cnew && cnew < cols {
            if grid[rnew][cnew] == '1' {
                _, ok := seen[Pair{rnew, cnew}]
                if !ok {
                    seen[Pair{r, c}] = true
                    grid[rnew][cnew] = 'X'
                    grid = dfs(rnew, cnew, rows, cols, grid, seen)
                }
            }
        }
    }
    return grid
}

func numIslands(grid [][]byte) int {
    seen := make(map[Pair]bool)
    rows := len(grid)
    cols := len(grid[0])
    res := 0
    for r := 0; r < rows; r++ {
        for c := 0; c < cols; c++ {
            if grid[r][c] == '1' {
                res++
                seen[Pair{r, c}] = true
                grid = dfs(r, c, rows, cols, grid, seen)
            }
        }
    }
    return res
}

func main() {
    var r int
    for _, grid := range [][][]byte{
        [][]byte{{'1', '0', '1'}, {'0', '1', '0'}},
        [][]byte{{'1', '0', '1'}, {'1', '0', '0'}},
        [][]byte{{'1', '0', '1'}, {'1', '1', '1'}},
        [][]byte{{'0', '0', '0', '0', '0', '1', '1', '1', '0', '0'}, {'0', '0', '0', '0', '1', '0', '1', '1', '1', '1'}, {'0', '0', '1', '1', '0', '1', '1', '1', '0', '1'}, {'1', '1', '1', '0', '0', '1', '1', '0', '0', '0'}, {'0', '0', '1', '1', '0', '1', '1', '0', '0', '0'}, {'0', '1', '0', '1', '1', '1', '0', '1', '1', '0'}, {'0', '0', '1', '1', '1', '0', '1', '0', '1', '0'}, {'1', '0', '0', '0', '1', '0', '0', '0', '1', '0'}, {'0', '1', '1', '0', '1', '1', '1', '1', '1', '1'}, {'0', '0', '1', '0', '1', '0', '1', '1', '0', '1'}, {'1', '0', '1', '1', '0', '1', '0', '1', '0', '1'}, {'1', '1', '1', '1', '0', '0', '1', '1', '1', '0'}, {'0', '0', '1', '1', '1', '1', '1', '0', '0', '0'}, {'0', '1', '1', '0', '0', '0', '0', '0', '0', '1'}, {'0', '0', '0', '0', '1', '0', '0', '0', '0', '0'}},
        [][]byte{{'1', '1', '1', '1', '0'}, {'1', '1', '0', '1', '0'}, {'1', '1', '0', '0', '0'}, {'0', '0', '0', '0', '0'}},
        [][]byte{{'1', '1', '0', '0', '0'}, {'1', '1', '0', '0', '0'}, {'0', '0', '1', '0', '0'}, {'0', '0', '0', '1', '1'}},
        [][]byte{{'0', '0', '0', '0', '0'}, {'0', '0', '0', '0', '0'}, {'0', '0', '0', '0', '0'}, {'0', '0', '0', '0', '0'}},
        [][]byte{{'0', '0', '0', '0', '0'}, {'0', '0', '0', '0', '0'}, {'0', '0', '0', '1', '0'}, {'0', '0', '0', '0', '0'}},
        [][]byte{{'0', '0', '0', '0', '0', '1', '1', '1', '0', '0'}, {'0', '0', '0', '0', '1', '0', '1', '1', '1', '1'}, {'0', '0', '1', '1', '0', '1', '1', '1', '0', '1'}, {'1', '1', '1', '0', '0', '1', '1', '0', '0', '0'}, {'0', '0', '1', '1', '0', '1', '1', '0', '0', '0'}, {'0', '1', '0', '1', '1', '1', '0', '1', '1', '0'}, {'0', '0', '1', '1', '1', '0', '1', '0', '1', '0'}, {'1', '0', '0', '0', '1', '0', '0', '0', '1', '0'}, {'0', '1', '1', '0', '1', '1', '1', '1', '1', '1'}, {'0', '0', '1', '0', '1', '0', '1', '1', '0', '1'}, {'1', '0', '1', '1', '0', '1', '0', '1', '0', '1'}, {'1', '1', '1', '1', '0', '0', '1', '1', '1', '0'}, {'0', '0', '1', '1', '1', '1', '1', '0', '0', '0'}, {'0', '1', '1', '0', '0', '0', '0', '0', '0', '1'}, {'0', '0', '0', '0', '1', '0', '0', '0', '0', '0'}},
    } {
        r = numIslands(grid)
        fmt.Println(r)
    }
}

