from typing import List

class Solution:
    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:
        #
        # Beautiful problem that can be solved by Binary Search!
        #
        def maxStreak(n):
            curr = 0
            total = 0
            for b in bloomDay:
                if b <= n:
                    curr += 1
                else:
                    if curr >= k:
                        total += (curr // k) * k
                    curr = 0
            if curr >= k:
                total += (curr // k) * k
            return total
        N = len(bloomDay)
        if m * k > N:
            return -1
        left, right = min(bloomDay), max(bloomDay)
        while left <= right:
            mid = (left + right) // 2
            ms = maxStreak(mid)
            if ms >= m * k:
                right = mid - 1
            else:
                left = mid + 1
        return left

# Main section
for bloomDay, m, k in [
                        ([1,10,3,10,2], 3, 1),
                        ([1,10,3,10,2], 3, 2),
                        ([7,7,7,7,12,7,7], 2, 3),
                        ([78,49,6,79,5,16,63,5,25,94,96,50,44,36,11,12,78,8,21,64,77,5,34,49,44,81,72,95,90,84,12,91,74,20,50,97,89,89,29,55,62,49,16,39,85,8,60,87,89,19,88,63,84,7,3,84,79,64,11,76,42,47,4,66,31,45,48,100,5,38,64,15,11,8,16,75,25,99,56,44,88,9,25,70,37,19,47,34,99,79,35,17,65,4,68,94,66,70,60,46,36,1,72,82,97,72,39,40,95,11,81,33,52,97,97,98,56,22,44,79,39,33,48,67,86,62,59,72,2,34,99,31,65,76,82,72,1,27,3,67,43,31,74,53,84,57,46,71,58,40,52,24,27,3,29,57,4,99,61,55,2,51,13,45,74,10,17,73,1,8,7,59,81,100,1,55,52,89,34,42,82,59,17,33,15,3,99,37,3,69,66,24,60,1,14,13,50,60,51,63,12,99,22,29,44,50,68,72,36,66,90,6,98,55,3,41,53,51,46,73,49,31,5,44,99,98,68,17,43,39,47,62,15,41,23,99,40,7,84,19,60,61,57,27,18,77,49,63,9,100,83,32,91,85,73,89,46,35,82,86,53,99,27,67,37,57,2,81,5,29,2,85,81,52,94,94,72,15,82,57,47,27,80,29,23,55,55,1,55,28,82,88,30,40,26,71,94,92,8,63,9,40,10,73,10,3,46,13,99,37,39,76,46,43,83,6,63,8,51,65,21,65,17,79,68,42,61,26,59,64,68,8,75,54,12,59,59,22,37,38,65,39,56,5,57,71,90,81,76,52,88,9,77,48,54,54,96,93,2,46,23,85,18,4,60,40,27,48,37,37,18,33,52,63,2,53,75,100,13,2,51,26,62,100,96,97,100,47,96,76,67,47,54,49,83,75,79,5,85,68,51,64,64,4,68,57,2,94,13,35,47,65,52,52,46,3,3,22,14,66,23,23,86,75,19,26,60,51,35,36,77,3,12,88,16,58,40,64,28,90,94,14,29,75,82,17,33,74,5,39,69,37,84,84,52,74,64,18,92,35,53,10,80,60,64,34,94,62,67,9,42,70,47,39,26,31,34,34,72,21,77,69,13,14,92,91,71,13,91,76,89,38,83,49,80,63,50,80,37,50,42,59,24,55,39,42,98,23,93,26,17,58,31,75,66,16,85,48,72,18,64,86,61,56,98,19,21,69,25,56,57,81,85,92,69,27,35,86,88,5,72,65,56,57,16,32,6,11,15,40,6,15,50,75,74,67,82,12,72,26,59,34,4,13,72,99,91,40,62,67,51,45,38,56,86,54,8,90,3,9,37,34,14,10,95,74,66,28,90,44,35,82,27,41,14,70,64,8,41,10,86,90,34,32,65,94,88,88,18,46,23,22,70,29,97,57,47,46,62,51,94,50,85,71,36,65,52,27,12,13,36,83,44,97,73,88,50,20,87,69,86,66,57,41,75,13,51,67,29,43,43,47,73,96,33,51,18,93,2,7,85,82,36,74,1,2,44,12,64,38,10,34,92,80,63,95,5,76,34,98,84,17,67,15,14,15,5,60,4,40,8,3,58,5,7,37,76,65,64,16,21,59,99,97,71,60,26,48,40,78,58,51,82,79,65,25,58,90,94,40,50,99,42,31,37,41,98,43,11,57,37,89,77,72,76,63,50,11,92,92,90,11,75,99,20,67,80,95,73,15,72,89,66,45,73,65,27,98,65,11,92,14,31,65,96,75,67,76,85,88,49,98,30,73,98,39,25,28,28,11,84,17,56,28,10,92,37,78,12,2,70,62,61,92,98,2,11,83,29,30,5,5,73,89,66,38,26,69,3,23,78,64,36,57,7,62,8,84,33,58,56,94,25,14,41,80,59,12,54,21,64,13,24,68,91,30,37,79,80,96,39,55,13,31,76,4,89,71,64,67,81,93,42,86,19,95,36,97,2,57,58,14,5,61,88,17,94,42,7,27,2,60,83,36,69,5,9,5,84,48,5,49,2,94,58,89,65,7,63,95,66,55,18,5,16,5,74,26,33,71,4,88,24,3,10,23,15,25,45,37,28,85,24,85,54,2,95,57,41,39,54,68,58,80,68,89,18,29,54,86,3,78,27,68,6,50,4,9,69,40,32,20,3,16,20,14,19,74,29,66,72,92,13,21,54,82,20,94,91,8,50,78,71,37,6,40,48,68,89,38,28,26,84,3,1,68,90,9,79,72,12,54,3,41,80,37,30,6,46,35,26,47,5,24,22,63,85,82,97,12], 13, 11),
                        ([78,49,6,79,5,16,63,5,25,94,96,50,44,36,11], 3, 3),
                        ([13,13,18,5,15,11,18,9,6,6,15,19,3,15,10,11,13,9,7,11,12,19,18,2,5,4,20,17,18,4,7,3,2,5,4,13,10,5,8,7,3,6,5,20,8,10,12,3,4,14],5,7),
                      ]:
    print(f'bloomDay, m, k = {bloomDay}, {m}, {k}')
    sol = Solution()
    r = sol.minDays(bloomDay, m, k)
    print(f'r = {r}')
    print('=====================')


