# You are given two strings s and t.
# String t is generated by random shuffling string s and then add one more
# letter at a random position. Return the letter that was added to t.
#
# Interesting solution by user "hi-malik" using bit-fiddling:
# https://leetcode.com/problems/find-the-difference/discuss/1751380/JavaC%2B%2BPython-very-very-EASY-to-go-solution
#

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        # Using bit fiddling. Looks like XOR operator can be used to sniff out duplicates.
        #
        # Let's say s = 'ab' and t = 'abc'. Then, starting with 0, if we do a cumulative XOR
        # on all characters of s, then we are left with 3.
        # 0 ^ ord('a') = 0 ^ 97 = 97
        # 97 ^ ord('b') = 97 ^ 98 = 3 
        #
        # Continuing the cumulative XOR with characters of t, we get this:
        # 3 ^ ord('a') = 3 ^ 97 = 98
        # 98 ^ ord('b') = 98 ^ 98 = 0 => Cumulative XOR reset to 0 because we walked through duplicates!
        # 0 ^ ord('c') = 0 ^ 99 = 99 => return chr(99) = 'c'
        #
        c = 0
        for ch in s+t:
            c ^= ord(ch)
        return chr(c) 

# Main section
sol = Solution()
for s, t in [
               ('abcd', 'abcde'),
               ('', 'y'),
               ('abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyza'),
               ('aaaaa', 'aaaaaa'),
               ('aaaaa', 'baaaaa'),
            ]:
    print(f's = {s} ; t = {t}')
    r = sol.findTheDifference(s, t)
    print(f'r = {r}')
    print('======================')

